<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-01-06T16:00:50-08:00</updated><id>/</id><title type="html">DATAmadness</title><subtitle>Exploring the world through data analysis and machine learning</subtitle><entry><title type="html">Planning Support Team Resources in Start-ups Using Statistics</title><link href="/Team-Plannning" rel="alternate" type="text/html" title="Planning Support Team Resources in Start-ups Using Statistics" /><published>2018-06-24T03:32:00-07:00</published><updated>2018-06-24T03:32:00-07:00</updated><id>/Team-Plannning</id><content type="html" xml:base="/Team-Plannning">Planning staff allocation for customer support can be challenging since great support is essential for company success but it can consume large portion of usually limited budget. This can be particularly true in smaller companies and start-ups where the case volume significantly fluctuates and the staff also needs to work on other projects besides support.

Disclaimer: Data used in this example are made up using formulas


Fortunately, basics statistics can help to guide your staffing and time allocation decisions by using readily available data from your CRM system.</content><author><name>DATAmadness</name></author><category term="Statistics" /><summary type="html">Planning staff allocation for customer support can be challenging since great support is essential for company success but it can consume large portion of usually limited budget. This can be particularly true in smaller companies and start-ups where the case volume significantly fluctuates and the staff also needs to work on other projects besides support.</summary></entry><entry><title type="html">Support Data Generator in Python</title><link href="/Support-Data-Generator" rel="alternate" type="text/html" title="Support Data Generator in Python" /><published>2018-05-27T01:00:00-07:00</published><updated>2018-05-27T01:00:00-07:00</updated><id>/Support-Data-Generator</id><content type="html" xml:base="/Support-Data-Generator">&lt;p&gt;We all have been there - it is Sunday evening, you have couple of fresh ideas for a new customer centric strategy and you want to test how it would hold up in the real world. Unfortunately, it might be hard to get real or at least somewhat realistic customer support ticket datasets for specific business models and company size.&lt;/p&gt;

&lt;p&gt;If this issue plagues you on regular basis, head to &lt;a href=&quot;https://github.com/datamadness/Support-ticket-data-generator.git&quot;&gt;this repository on my GitHub&lt;/a&gt; and download the two python files:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main_generate_ticket_data.py&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;generate_daily_data.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This code will allow you to input few numeric parameters and quickly generate custom support ticket datasets that reflect what you could expect in real world business operations. &lt;br /&gt;The remainder of this post aims to provide feature documentation and couple of examples how to quickly model the support data for two distinct company profiles.&lt;/p&gt;

&lt;h4 id=&quot;feature-overview&quot;&gt;Feature Overview&lt;/h4&gt;

&lt;p&gt;A python function to generate one year worth of support data(call repeatedly for x years worth of data)
Generates varied, but statistically relevant number of support tickets for each day of the year&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Effects of business days vs weekends&lt;/li&gt;
  &lt;li&gt;Capable to simulate an impact of arbitrary number of busy seasons through the year(e.g. Christmas in retail or tax periods in accounting)&lt;/li&gt;
  &lt;li&gt;Simulates realistic, but easy to control statistical distribution of logged time for each support ticket / case.&lt;/li&gt;
  &lt;li&gt;Control number of customer accounts to capture desired support volume vs customer base size&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;input-parameters-summary&quot;&gt;Input parameters summary&lt;/h4&gt;

&lt;h6 id=&quot;daily-ticket-volume-through-the-year-controls&quot;&gt;Daily ticket volume through the year controls:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;Seasonal peaks&lt;/li&gt;
  &lt;li&gt;Weekend volumes&lt;/li&gt;
  &lt;li&gt;Daily volume range (population mean, approximate min and max outliers)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;effort--logged-time-per-ticket-controls&quot;&gt;Effort / logged time per ticket controls:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Median&lt;/li&gt;
  &lt;li&gt;Minimum logged time
Advanced / Optional:&lt;/li&gt;
  &lt;li&gt;Skewness factor&lt;/li&gt;
  &lt;li&gt;Degrees of freedom&lt;/li&gt;
  &lt;li&gt;Non-centrality (impacts variance and kurtosis)&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;customer-base-controls&quot;&gt;Customer base controls:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;Number of unique accounts&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;modelling-daily-tickets-volumes-through-the-year&quot;&gt;Modelling daily tickets volumes through the year&lt;/h4&gt;
&lt;p&gt;The number of daily tickets is typically random variable that has reasonably defined mean and variance. Moreover, the mean is likely to move through the year to reflect seasonal effects such as major holidays or annual business cycles. 
To model this behaviour, the code is using truncated normal continuous variable function from scipy package to generate the number of tickets on given day:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nohighlight&quot;&gt;        #Calculate distribution function
        dist = stats.truncnorm((annual_minimum - mu) / sigma, (annual_maximum - mu) / sigma, loc=mu, scale=sigma)
        #Generate number of tickets for given day
        ticket_num = int(dist.rvs())
&amp;lt;/pre&amp;gt;&lt;/code&gt;
Simply specify the approximate minimum and maximum number of cases per day through the year. The mean `mu` and variance `sigma` for given day then will be calculated based the seasonal effect function:
&lt;pre&gt;&lt;code class=&quot;nohighlight&quot;&gt;        #Calculate mean for given day
        mu = (annual_maximum - annual_minimum)/2 + seasonal_factor * (busy_level - 0.5) * ((annual_maximum - annual_minimum)/2) 
        #Calculate standard deviation for given day
        sigma = (annual_maximum - annual_minimum) * 0.1
&amp;lt;/pre&amp;gt;&lt;/code&gt;
The seasonal effect requires you to input the peak months as integer values. Here is an example for simulating two seasonal peaks in February and November:
busy_months = np.array([2,11])

Moreover, input `seasonal_factor` (float &amp;lt;0,1&amp;gt;) allows you to control the magnitude of seasonal effects:

* 0 no seasonal effects
* 1 maximum seasonal effects

The following plot demonstrates the annual volumes and seasonality dependency with all other parameters being constant:
&lt;pre&gt;&lt;code class=&quot;nohighlight&quot;&gt;    annual_minimum = 5		# ~ annual daily minimum of tickets
    annual_maximum = 50       	# ~ annual daily maximum of tickets           
    busy_months = np.array([2,7])       # February and July are busy months
&amp;lt;/pre&amp;gt;&lt;/code&gt;
*Seasonal factor impact comparison:*
![image test](/assets/images/support_data_generator/weekly_ticket_totals_comparison.png)







###### Impacts of weekends:
Weekends can have a major impact on your ticket volumes. This can be particularly pronounced if your company is B2B oriented and your clients are off work while having little to no impact if you are operating in B2C model. To model this, select the appropriate value of the weekend_factor parameter (float - &amp;lt;0,1&amp;gt;):
* 0 - no ticket volume on weekends
* 1 - weekends are the same as business days




###### Modelling logged time for each opened ticket
Crucial part of planning your operations is to have an understanding of how much time is spent on each ticket. Unfortunately, this data cannot be simulated by a simple normal distribution function. While you will be able to find reasonable mean in your real world data, you will see few large outliers due to complex support problems and more or less pronounced positive skew. Fortunately, this can be quite well approximated by the non-central chi-squared distribution([Wikipedia](https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution )) that can generalize the k - degrees of freedom of chi-squared function via noncentrality parameter.

**Probability Density Function(PDF) for vanila non-central chi-squared function:**

$$f_{X}(x;k,\lambda )=\sum _{i=0}^{\infty }{\frac {e^{-\lambda /2}(\lambda /2)^{i}}{i!}}f_{Y_{k+2i}}(x)$$

Non-central chi-squared PDF visualization (source [en.wikipedia.com](https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution#/media/File:Chi-Squared-(nonCentral)-pdf.png)):
![image test](/assets/images/support_data_generator/Chi-Squared-(nonCentral)-pdf.png)


In the proposed python code, the logged time data is generated by function daily_data imported from generate_daily_data.py. This function is called by the main function with the following parameters:

######Mandatory:
* size - automatically determined by the main function
* logged_time_median_desired - median logged time for the population in minutes
* Logged_time_minimum - minimum logged time in minutes

######Optional:
* skewness_factor - [0,1] value;  0 for default chi^2 distribution; 1 for large positive skew
* k - degrees of freedom
* nonc - non-centrality (stats typically uses lambda letter) 



The following plot shows histogram and kernel density estimation(KDE) for the logged time data of ~8000 tickets over 12 months:
![image test](/assets/images/support_data_generator/logged_time_distribution_plot.png)
&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;</content><author><name>DATAmadness</name></author><category term="Statistics" /><summary type="html">We all have been there - it is Sunday evening, you have couple of fresh ideas for a new customer centric strategy and you want to test how it would hold up in the real world. Unfortunately, it might be hard to get real or at least somewhat realistic customer support ticket datasets for specific business models and company size.</summary></entry><entry><title type="html">First Test Post</title><link href="/Test-Post" rel="alternate" type="text/html" title="First Test Post" /><published>2018-05-27T01:00:00-07:00</published><updated>2018-05-27T01:00:00-07:00</updated><id>/Test-Post</id><content type="html" xml:base="/Test-Post">&lt;p&gt;TEST POST iFrame 2 goes here&lt;/p&gt;

&lt;div style=&quot;width: 100%&quot;&gt;&lt;iframe width=&quot;100%&quot; height=&quot;600&quot; src=&quot;https://maps.google.com/maps?width=100%&amp;amp;height=600&amp;amp;hl=en&amp;amp;q=1%20Grafton%20Street%2C%20Dublin%2C%20Ireland+(My%20Business%20Name)&amp;amp;ie=UTF8&amp;amp;t=&amp;amp;z=14&amp;amp;iwloc=B&amp;amp;output=embed&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;&lt;a href=&quot;https://www.maps.ie/create-google-map/&quot;&gt;Embed Google Map&lt;/a&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;


&lt;p&gt;TEST - Trying to add mathjax to this post:&lt;/p&gt;
&lt;p&gt; $$ r = h = \sqrt{\frac {1} {2}} = \sqrt{\frac {N} {N+1}} \sqrt{\frac {N+1} {2N}} $$ &lt;/p&gt;
&lt;h2 id=&quot;basictagging&quot;&gt;Basic tagging&lt;/h2&gt;
&lt;p&gt;When you write a post, you can assign tags to help differentiate between categories of content. For example, you might tag some posts with &lt;code&gt;News&lt;/code&gt; and other posts with &lt;code&gt;Cycling&lt;/code&gt;, which would create two distinct categories of content listed on &lt;code&gt;/tag/news/&lt;/code&gt; and &lt;code&gt;/tag/cycling/&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;If you tag a post with both &lt;code&gt;News&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;Cycling&lt;/code&gt; - then it appears in both sections.&lt;/p&gt;
&lt;p&gt;Tag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data.&lt;/p&gt;
&lt;h2 id=&quot;theprimarytag&quot;&gt;The primary tag&lt;/h2&gt;
&lt;p&gt;Inside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. So you can add the most important tag which you want to show up in your theme, but also add a bunch of related tags which are less important.&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;News&lt;/strong&gt;, Cycling, Bart Stevens, Extreme Sports&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;In this example, &lt;strong&gt;News&lt;/strong&gt; is the primary tag which will be displayed by the theme, but the post will also still receive all the other tags, and show up in their respective archives.&lt;/p&gt;
&lt;h2 id=&quot;privatetags&quot;&gt;Private tags&lt;/h2&gt;
&lt;p&gt;Sometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling.&lt;/p&gt;
&lt;p&gt;For example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do.&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;News&lt;/strong&gt;, Cycling, #video&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;Here, the theme would assign the post publicly displayed tags of &lt;code&gt;News&lt;/code&gt;, and &lt;code&gt;Cycling&lt;/code&gt; - but it would also keep a private record of the post being tagged with &lt;code&gt;#video&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In your theme, you could then look for private tags conditionally and give them special formatting:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;nohighlight&quot;&gt;{{#post}}
    {{#has tag=&amp;quot;#video&amp;quot;}}
        ...markup for a nice big video post layout...
    {{else}}
        ...regular markup for a post...
    {{/has}}
{{/post}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find documentation for theme development techniques like this and many more over on Ghost's extensive &lt;a href=&quot;https://themes.ghost.org/&quot;&gt;theme documentation&lt;/a&gt;.&lt;/p&gt;</content><author><name>DATAmadness</name></author><category term="Statistics" /><summary type="html">TEST POST iFrame 2 goes here</summary></entry></feed>