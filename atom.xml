<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> - Articles</title>
    <description>Exploring the world through data analysis and machine learning</description>
    <link>
    </link>
    
      
      <item>
        <title>Time signal classification using Convolutional Neural Network in TensorFlow - Part 1</title>
        
          <description>&lt;p&gt;This example explores the possibility to use Convolutional Neural Network(CNN) to classify time domain signal. The fundamental thesis of this work is that arbitrarily long sampled time domain signal can be divided into short segments using a window function. These segments can be further converted to frequency domain data via &lt;a href=&quot;https://en.wikipedia.org/wiki/Short-time_Fourier_transform&quot;&gt;Short Time Fourier Transform(STFT)&lt;/a&gt;	. This approach is well known from acoustics, but it is easily applicable on any frequency spectrum.
The goal of this work is to add an alternative tool to ensemble of classifiers for time signal predictions. As an example, this specific classifier example was developed on &lt;a href=&quot;https://www.kaggle.com/c/vsb-power-line-fault-detection/data&quot;&gt;VSB Power Line Fault Detection dataset&lt;/a&gt; where I aimed to combine three classifiers:&lt;/p&gt;

</description>
        
        <pubDate>Mon, 25 Mar 2019 22:00:00 +0000</pubDate>
        <link>
        /time-signal-CNN</link>
        <guid isPermaLink="true">/time-signal-CNN</guid>
      </item>
      
    
      
      <item>
        <title>TensorFlow Tip - input_fn with custom parameters</title>
        
          <description>&lt;p&gt;TensorFlow Estimators API is great for quickly building your custom models, but you might have noticed there is no  obvious way to pass custom parameters into the input_fn from your estimator. That can be a limiting factor when building more complicated input functions that include a data pipline in them(&lt;a href=&quot;https://datamadness.github.io/tensorflow_estimator_large_dataset_feed&quot;&gt;see this post&lt;/a&gt;).
This short post shows a quick tip how to use the pythonic lambda function to solve the problem on a single line of code.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 24 Mar 2019 12:00:00 +0000</pubDate>
        <link>
        /tensorflow_input_funtion_tip</link>
        <guid isPermaLink="true">/tensorflow_input_funtion_tip</guid>
      </item>
      
    
      
      <item>
        <title>TensorFlow Estimators API - Feeding large datasets from drive via TFRecords (MNIST example)</title>
        
          <description>&lt;p&gt;It is easy to hit resource limits when working with large datasets. In particular, the available memory becomes quickly a limiting factor when training your neural networks on swaths of data. The solution is to create a continuous stream of data that will sequentially read batch data from drive(s). Using this approach, the memory needs to hold only one batch of data while pre-loading the data for the next batch, allowing us to operate with datasets of virtually unlimited size.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 23 Mar 2019 10:35:00 +0000</pubDate>
        <link>
        /tensorflow_estimator_large_dataset_feed</link>
        <guid isPermaLink="true">/tensorflow_estimator_large_dataset_feed</guid>
      </item>
      
    
      
      <item>
        <title>Planning Support Team Resources in Start-ups Using Statistics</title>
        
          <description>Planning staff allocation for customer support can be challenging since great support is essential for company success but it can consume large portion of usually limited budget. This can be particularly true in smaller companies and start-ups where the case volume significantly fluctuates and the staff also needs to work on other projects besides support.

</description>
        
        <pubDate>Sun, 24 Jun 2018 10:32:00 +0000</pubDate>
        <link>
        /Team-Plannning</link>
        <guid isPermaLink="true">/Team-Plannning</guid>
      </item>
      
    
      
      <item>
        <title>Python function to automatically transform skewed data in Pandas DataFrame</title>
        
          <description>&lt;p&gt;When I stumble on an interesting new dataset, I often find myself excitedly prototyping a quick machine learning models to see what type of insights I could get out of the latest find. Since hacking together a quick model can be fast thanks to plenty awesome packages such as scikit-learn or Keras, I happen to spend most of my prototyping effort on cleaning and transforming the data. (I always like to start with the simplest regressors / classifiers)&lt;/p&gt;

</description>
        
        <pubDate>Sun, 27 May 2018 08:00:00 +0000</pubDate>
        <link>
        /Skewness_Auto_Transform</link>
        <guid isPermaLink="true">/Skewness_Auto_Transform</guid>
      </item>
      
    
      
      <item>
        <title>Support Data Generator in Python</title>
        
          <description>&lt;p&gt;We all have been there - it is Sunday evening, you have couple of fresh ideas for a new customer centric strategy and you want to test how it would hold up in the real world. Unfortunately, it might be hard to get real or at least somewhat realistic customer support ticket datasets for specific business models and company size.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 27 May 2018 08:00:00 +0000</pubDate>
        <link>
        /Support-Data-Generator</link>
        <guid isPermaLink="true">/Support-Data-Generator</guid>
      </item>
      
    
  </channel>
</rss>
